/*
 * This Java source file was generated by the Gradle 'init' task.
 */

package ru.lanwen.pulsar.functions;


import org.apache.pulsar.client.admin.PulsarAdmin;
import org.apache.pulsar.client.api.PulsarClient;
import org.apache.pulsar.client.api.PulsarClientException;
import org.apache.pulsar.common.functions.FunctionConfig;
import org.apache.pulsar.functions.LocalRunner;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.testcontainers.containers.PulsarContainer;
import org.testcontainers.containers.wait.strategy.Wait;
import reactor.core.Disposable;

import java.time.Duration;
import java.util.List;
import java.util.Map;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

public class IntegrationTest {

    private static final PulsarContainer PULSAR = new PulsarContainer("2.5.0")
            .withCommand("bin/pulsar", "standalone")
//            .withLogConsumer(outputFrame -> System.out.print(outputFrame.getUtf8String()))
            .waitingFor(Wait.forLogMessage(".*Function worker service started.*", 1));

    static final String FUNCTIONS_JAR_PATH_PROPERTY = "functions.jar.path";
    static final String TEST_INPUTS_TOPIC = "test-inputs-topic";
    static final String TEST_OUTPUT_TOPIC = "test-output-topic";
    static final String TEST_DLQ_TOPIC = "test-dlq-topic";
    static final String TEST_LOG_TOPIC = "test-log-topic";

    private static PulsarAdmin pulsarAdmin;
    private static PulsarClient pulsarClient;

    static {
        PULSAR.setPortBindings(List.of(
                "8080:" + PulsarContainer.BROKER_HTTP_PORT,
                "6650:" + PulsarContainer.BROKER_PORT
        ));
        PULSAR.start();
    }

    @BeforeAll
    static void beforeAll() throws PulsarClientException {
        pulsarAdmin = PulsarAdmin.builder()
                .serviceHttpUrl(PULSAR.getHttpServiceUrl())
                .build();

        pulsarClient = PulsarClient.builder()
                .serviceUrl(PULSAR.getPulsarBrokerUrl())
                .build();
    }

    FunctionConfig confSimple = FunctionConfig.builder()
            .tenant("public")
            .namespace("default")
            .name("exclamation")
            .retainOrdering(true)
            .inputs(List.of(TEST_INPUTS_TOPIC))
            .output(TEST_OUTPUT_TOPIC)
            .className(ExclamationFunction.class.getName())
            .jar(System.getProperty(FUNCTIONS_JAR_PATH_PROPERTY))
            .runtime(FunctionConfig.Runtime.JAVA)
            .build();

    FunctionConfig confSerde = FunctionConfig.builder()
            .tenant("public")
            .namespace("default")
            .name("serde")
            .retainOrdering(true)
            .inputs(List.of(TEST_INPUTS_TOPIC))
            .output(TEST_OUTPUT_TOPIC)
            .deadLetterTopic(TEST_DLQ_TOPIC)
            .maxMessageRetries(2)
            .logTopic(TEST_LOG_TOPIC)
            .className(SerDeFunction.class.getName())
            .jar(System.getProperty(FUNCTIONS_JAR_PATH_PROPERTY))
            .runtime(FunctionConfig.Runtime.JAVA)
            .customSerdeInputs(Map.of(
                    TEST_INPUTS_TOPIC, TreeNodeSerDe.class.getName()
            ))
            .outputSerdeClassName(TreeNodeSerDe.class.getName())
            .build();

    @Test
    public void shouldRunSimpleFunction() throws Exception {
        LocalRunner.builder().functionConfig(confSimple).build().start(false);

        Disposable publisher = Producer.string(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Disposable listener = Consumer.consumer(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Consumer.consumer(pulsarClient, TEST_OUTPUT_TOPIC)
                .doOnTerminate(publisher::dispose)
                .doOnTerminate(listener::dispose)
                .blockLast(Duration.ofMinutes(10));
    }

    @Test
    public void shouldRunSimpleFunctionCluster() throws Exception {
        pulsarAdmin.functions().createFunction(confSimple, System.getProperty(FUNCTIONS_JAR_PATH_PROPERTY));

        Disposable subscribe = Producer.string(pulsarClient, TEST_INPUTS_TOPIC).log().subscribe();
        Long inputCnt = Consumer.consumer(pulsarClient, TEST_INPUTS_TOPIC).doOnTerminate(subscribe::dispose).log().take(2).count().block(Duration.ofMinutes(1));
        Long outCnt = Consumer.consumer(pulsarClient, TEST_OUTPUT_TOPIC).take(2).count().block(Duration.ofMinutes(1));

        assertThat(inputCnt, is(outCnt));
    }

    @Test
    public void shouldRunSerDeFunction() throws Exception {
        LocalRunner.builder().functionConfig(confSerde).build().start(false);

        Disposable publisher = Producer.json(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Disposable listener = Consumer.consumer(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Disposable listenerdlq = Consumer.consumer(pulsarClient, TEST_DLQ_TOPIC).subscribe();
        Disposable listenerlog = Consumer.consumer(pulsarClient, TEST_LOG_TOPIC).subscribe();
        Consumer.consumer(pulsarClient, TEST_OUTPUT_TOPIC)
                .doOnTerminate(publisher::dispose)
                .doOnTerminate(listener::dispose)
                .doOnTerminate(listenerlog::dispose)
                .doOnTerminate(listenerdlq::dispose)
                .blockLast(Duration.ofMinutes(10));
    }

    @Test
    public void shouldRunSerDeFunctionCluster() throws Exception {
        pulsarAdmin.functions().createFunction(confSerde, System.getProperty(FUNCTIONS_JAR_PATH_PROPERTY));

        Disposable publisher = Producer.json(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Disposable listener = Consumer.consumer(pulsarClient, TEST_INPUTS_TOPIC).subscribe();
        Disposable listenerdlq = Consumer.consumer(pulsarClient, TEST_DLQ_TOPIC).subscribe();
        Disposable listenerlog = Consumer.consumer(pulsarClient, TEST_LOG_TOPIC).subscribe();

        System.out.println(String.format(
                "docker exec %s cat /tmp/functions/%s/%s/%s/%s-0.log", PULSAR.getContainerId(), confSerde.getTenant(), confSerde.getNamespace(), confSerde.getName(), confSerde.getName()
        ));

        Consumer.consumer(pulsarClient, TEST_OUTPUT_TOPIC)
                .doOnTerminate(publisher::dispose)
                .doOnTerminate(listener::dispose)
                .doOnTerminate(listenerlog::dispose)
                .doOnTerminate(listenerdlq::dispose)
                .blockLast(Duration.ofMinutes(10));
    }


}
